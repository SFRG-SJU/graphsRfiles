distances(Gk,u,v)
u=2
pu=c(vertGkm[u,])
v=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
distances(Gk,u,v)
pu
v
vertGkm
DiGk= distances(g1, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
DiGk
dim(DiGk)
dtr=c()
for (u in 1:nGk){
pu=c(vertGkm[u,])
v=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,v])}
dtr
rm(list=ls())
library(igraph)
g1 <- sample_gnm(20, 30)
tkplot(g1, vertex.shape='circle',
vertex.size=15,
vertex.color='gold')
g1 <- sample_gnm(20, 30)
tkplot(g1, vertex.shape='circle',
vertex.size=15,
vertex.color='gold')
Di= distances(g1, v=V(g1), to =V(g1), mode = c("all", "out",
"in"), weights = NULL, algorithm ="dijkstra")
nG=length(V(g1)) #number of vertices of G
Di= distances(g1, v=V(g1), to =V(g1), weights = NULL, algorithm ="dijkstra")
nG=length(V(g1)) #number of vertices of G
class(Di)
dim(Di)
nG=length(V(g1)) #number of vertices of G
m=3
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in 1:nGk){
pu=c(vertGkm[u,])
v=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,v])}
nGk
V(Gk)
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
v=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,v])}
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
rm(list=ls())
library(igraph)
g1 <- sample_gnm(20, 30)
tkplot(g1, vertex.shape='circle',
vertex.size=15,
vertex.color='gold')
Di= distances(g1, v=V(g1), to =V(g1), weights = NULL, algorithm ="dijkstra")
nG=length(V(g1)) #number of vertices of G
m=3
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
u=6
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
pu
ru
vertGkm[ru,]
all_shortest_paths(Gk, u, to = ru, weights = NULL)
asp=all_shortest_paths(Gk, u, to = ru, weights = NULL)
asp$res
asp$res[1]
vertGkm[asp$res,]
vertGkm[asp$res[[]][1],]
class(asp$res)
dim(asp$res)
asp$res[[]][1]
asp$res[[1]][1]
asp$res[[1]]
asp$res[[2]]
lapply(vertGkm[asp$res[[1]],])
map(vertGkm[asp$res[[1]],])
vertGkm[asp$res[[1]],]
length(asp$res)
vertGkm[asp$res[[2]],]
rm(list=ls())
library(igraph)
g1 <- sample_gnm(20, 30)
tkplot(g1, vertex.shape='circle',
vertex.size=15,
vertex.color='gold')
Di= distances(g1, v=V(g1), to =V(g1), weights = NULL, algorithm ="dijkstra")
nG=length(V(g1)) #number of vertices of G
m=3
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
u=6
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
pu #pair corresponding to vertex u
ru #vertex corresponding to reverse of the pair pu
vertGkm[ru,] #reverse of the pair pu
asp=all_shortest_paths(Gk, u, to = ru, weights = NULL)
length(asp$res)
np=length(asp$res)
for(i in 1:np){vertGkm[asp$res[[i]],]}
vertGkm[asp$res[[]],]
vertGkm[asp$res[[1]],]
vertGkm[asp$res[[6]],]
vertGkm[asp$res[[3]],]
m=4
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
u=6
rm(list=ls())
library(igraph)
g1 <- sample_gnm(30, 40)
tkplot(g1, vertex.shape='circle',
vertex.size=15,
vertex.color='gold')
Di= distances(g1, v=V(g1), to =V(g1), weights = NULL, algorithm ="dijkstra")
nG=length(V(g1)) #number of vertices of G
m=3
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
which(dtr=m)
which(dtr==m)
m=4
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
which(dtr==m)
rm(list=ls())
library(igraph)
g1 <- sample_gnm(20, 30)
tkplot(g1, vertex.shape='circle',
vertex.size=15,
vertex.color='gold')
Di= distances(g1, v=V(g1), to =V(g1), weights = NULL, algorithm ="dijkstra")
nG=length(V(g1)) #number of vertices of G
m=3
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
which(dtr==m)
u=5
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
pu #pair corresponding to vertex u
ru #vertex corresponding to reverse of the pair pu
vertGkm[ru,] #reverse of the pair pu
asp=all_shortest_paths(Gk, u, to = ru, weights = NULL)
np=length(asp$res)
vertGkm[asp$res[[1]],] # a cycle of length 6
np
vertGkm[asp$res[[3]],] # another? cycle of length 6
m=4
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
which(dtr==m)
u=6
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
pu #pair corresponding to vertex u
ru #vertex corresponding to reverse of the pair pu
vertGkm[ru,] #reverse of the pair pu
asp=all_shortest_paths(Gk, u, to = ru, weights = NULL)
np=length(asp$res)
np
rm(list=ls())
library(igraph)
g1 <- sample_gnm(25, 42)
tkplot(g1, vertex.shape='circle',
vertex.size=15,
vertex.color='gold')
Di= distances(g1, v=V(g1), to =V(g1), weights = NULL, algorithm ="dijkstra")
nG=length(V(g1)) #number of vertices of G
m=3
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
dtr
which(dtr==m)
u=5
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
pu #pair corresponding to vertex u
ru #vertex corresponding to reverse of the pair pu
vertGkm[ru,] #reverse of the pair pu
asp=all_shortest_paths(Gk, u, to = ru, weights = NULL)
np=length(asp$res)
np
vertGkm[asp$res[[1]],] # a cycle of length 6
vertGkm[asp$res[[2]],] # another? cycle of length 6
m=4
k = 2*m
vertGk<-c()
for (i in V(g1)) {for (j in V(g1)) {
if (Di[i, j] == m) {vertGk<-c(vertGk,c(i,j))}
}
}
vertGkm<-matrix(vertGk,ncol=2,byrow=TRUE)
vertGkm
nGk=nrow(vertGkm) #number of vertices of Gk
edgGk <-c()
for (i in 1:(nGk-1)) {
for (j in (i+1):nGk) {
if (Di[vertGkm[i,1], vertGkm[j,1]] == 1) {
if (Di[vertGkm[i,2], vertGkm[j,2]] == 1) {
edgGk <-c(edgGk, c(i,j))
}
}
}
}
edgGkm<-matrix(edgGk,ncol=2,byrow=TRUE)
edgGkm
eGk=nrow(edgGkm) #number of edges of Gk
eGk
Gk<-graph_from_edgelist(edgGkm,directed=FALSE)
tkplot(Gk, vertex.shape='circle',
vertex.size=15,
vertex.color='pink')
DiGk= distances(Gk, v=V(Gk), to =V(Gk), weights = NULL, algorithm ="dijkstra")
dtr=c()  #distance to reverse in Gk: distance from (u,v) to (v,u)
for (u in V(Gk)){
pu=c(vertGkm[u,])
ru=which(vertGkm[1:nGk, 1]==pu[2] & vertGkm[1:nGk,2]==pu[1])
dtr<- c(dtr,DiGk[u,ru])}
